{"version":3,"file":"static/js/366.3ddff626.chunk.js","mappings":"oLAMe,SAASA,IACtB,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,GAAQ,aACpBC,GAAWC,EAAAA,EAAAA,WACX,UAAEC,IAAcC,EAAAA,EAAAA,MAGhBC,GAAWC,EAAAA,EAAAA,IAAkB,UAAW,WA4C9C,OA1CAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAY,CAChBC,SAAU,CACRJ,SAAU,CAAEK,MAAO,IAAIC,EAAAA,MAAYN,KAErCO,aAAe,gLAOfC,eAAiB,wVAWjBC,aAAa,GAGff,EAAMgB,UAAUC,IACVA,EAAMC,SACRD,EAAME,SAAW,IAAIP,EAAAA,eAAqBH,GAC5C,IAIFT,EAAMoB,SAASC,IAAI,EAAG,EAAG,EAAE,GAC1B,CAACrB,EAAOM,KAEXgB,EAAAA,EAAAA,IAAS,KACHpB,EAASqB,UACXrB,EAASqB,QAAQC,SAASC,GAAK,IACjC,KAGKC,EAAAA,EAAAA,KAAA,aAAWC,IAAKzB,EAAU0B,OAAQ5B,EAAO6B,MAAO,GACzD,C","sources":["pages/Model.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { useColorMode, useColorModeValue } from '@chakra-ui/react';\n\nexport default function Model() {\n  const { scene } = useGLTF('/hawk.glb');\n  const modelRef = useRef();\n  const { colorMode } = useColorMode();\n  \n  // Use a lighter blue in dark mode and a darker blue in light mode\n  const dotColor = useColorModeValue('#1992d4', '#81defd');\n\n  useEffect(() => {\n    const dotShader = {\n      uniforms: {\n        dotColor: { value: new THREE.Color(dotColor) },\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 dotColor;\n        varying vec2 vUv;\n        void main() {\n          float radius = 0.15;\n          vec2 grid = fract(vUv * 130.0);\n          float dist = length(grid - 0.5);\n          float alpha = 1.0 - smoothstep(radius, radius + 0.01, dist);\n          gl_FragColor = vec4(dotColor, alpha);\n        }\n      `,\n      transparent: true,\n    };\n\n    scene.traverse((child) => {\n      if (child.isMesh) {\n        child.material = new THREE.ShaderMaterial(dotShader);\n      }\n    });\n\n    // Center the model\n    scene.position.set(0, 0, 0);\n  }, [scene, dotColor]);\n\n  useFrame(() => {\n    if (modelRef.current) {\n      modelRef.current.rotation.y += 0.01;\n    }\n  });\n\n  return <primitive ref={modelRef} object={scene} scale={3} />;\n}"],"names":["Model","scene","useGLTF","modelRef","useRef","colorMode","useColorMode","dotColor","useColorModeValue","useEffect","dotShader","uniforms","value","THREE","vertexShader","fragmentShader","transparent","traverse","child","isMesh","material","position","set","useFrame","current","rotation","y","_jsx","ref","object","scale"],"sourceRoot":""}